/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Hospital.AdminArea;

import Business.Enterprise.Enterprise;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.AskforPatientRequest;
import Business.WorkRequest.DoctorPatientRequest;
import Business.WorkRequest.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kshitij
 */
public class ManageRequestsJPanel extends javax.swing.JPanel {

    private JPanel upc;
    private Enterprise enterprise;
    private UserAccount ua;
    private DoctorPatientRequest dpr;
    private AskforPatientRequest afp;

    /**
     * Creates new form ManageRequestsJPanel
     */
    public ManageRequestsJPanel(JPanel upc, Enterprise enterprise, UserAccount ua) {
        initComponents();
        this.upc = upc;
        this.enterprise = enterprise;
        this.ua = ua;
        populateDocReqForPat();

    }

    private void populateDocReqForPat() {
        DefaultTableModel model = (DefaultTableModel) patientInfojTable.getModel();
        model.setRowCount(0);

        for (WorkRequest wr : enterprise.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof AskforPatientRequest) {
                afp = (AskforPatientRequest) wr;
                Object[] row = new Object[6];
                row[0] = afp.getReqId();
                row[1] = afp.getPatId();
                row[2] = afp.getMessage();
                row[3] = afp.getSender().getPerson().getName();
                row[4] = afp.getOrgName();
                row[5] = afp == null ? ("N/A") : afp;
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientInfojTable = new javax.swing.JTable();
        backjButton = new javax.swing.JButton();
        seearchForPatientjButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(115, 166, 200));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 30)); // NOI18N
        jLabel1.setText("PATIENT INFO REQUEST");

        patientInfojTable.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        patientInfojTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Id", "Patient ID", "Info Asked", "Sender Name", "Organization Name", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientInfojTable.setRowHeight(26);
        jScrollPane1.setViewportView(patientInfojTable);

        backjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        backjButton.setText("<<Back");
        backjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButtonActionPerformed(evt);
            }
        });

        seearchForPatientjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        seearchForPatientjButton.setText("'Search for Patient'");
        seearchForPatientjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seearchForPatientjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(backjButton)
                        .addGap(359, 359, 359)
                        .addComponent(seearchForPatientjButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(502, 502, 502)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(428, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(backjButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(seearchForPatientjButton)))
                .addContainerGap(432, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButtonActionPerformed
        upc.remove(this);
        CardLayout cardLayout = (CardLayout) upc.getLayout();
        cardLayout.previous(upc);
    }//GEN-LAST:event_backjButtonActionPerformed

    private void seearchForPatientjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seearchForPatientjButtonActionPerformed
        int selectedRow = patientInfojTable.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to send the search the patient");
            return;
        }
        AskforPatientRequest afpr = (AskforPatientRequest) patientInfojTable.getValueAt(selectedRow, 5);
        int patID = afpr.getPatId();
        
        Patient patient = enterprise.getPersonDirectory().getPatientDirectory().searchPatient(patID);
        if(patient == null){
            JOptionPane.showMessageDialog(null, "No patient found");
            return;
        } else {
            ViewSearchedPatient panel = new ViewSearchedPatient(upc, patient, afpr, enterprise);
            upc.add("View Searched Patient", panel);
            CardLayout layout = (CardLayout) upc.getLayout();
            layout.next(upc);
        } 
            
    }//GEN-LAST:event_seearchForPatientjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientInfojTable;
    private javax.swing.JButton seearchForPatientjButton;
    // End of variables declaration//GEN-END:variables
}
