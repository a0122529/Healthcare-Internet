/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Hospital.DoctorArea;

import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.PatientInfoSent;
import Business.WorkRequest.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kshitij
 */
public class ReceivePatientInfoJPanel extends javax.swing.JPanel {
    private JPanel upc;
    private UserAccount ua;
    private Enterprise enterprise;
    private Ecosystem ecosystem;
    /**
     * Creates new form ReceivePatientInfoJPanel
     */
    public ReceivePatientInfoJPanel(JPanel upc, UserAccount ua, Enterprise enterprise, Ecosystem ecosystem) {
        initComponents();
        this.upc = upc;
        this.ua = ua;
        this.enterprise = enterprise;
        this.ecosystem = ecosystem;
        populatePatientInfoReq();
    }
    
     private void populatePatientInfoReq() {
        DefaultTableModel model = (DefaultTableModel) patientInfoRequestjTable.getModel();
        model.setRowCount(0);
        
        for (WorkRequest wr : ua.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof PatientInfoSent) {
                PatientInfoSent pis =  (PatientInfoSent) wr;
                Object[] row = new Object[8];
                row[0] = pis.getReqId();
                row[1] = pis.getPatient().getPatientId();
                row[2] = pis.getPatient();
                row[3] = pis.getSender().getPerson().getName();
                row[4] = pis.getSender().getPerson().getPersonId();
                row[5] = pis.getOrgName();
                row[6] = pis.getCityName();
                row[7] = pis.getStatus();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientInfoRequestjTable = new javax.swing.JTable();
        backjButton = new javax.swing.JButton();
        patientMedicalHistoryjButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(115, 166, 200));

        patientInfoRequestjTable.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        patientInfoRequestjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Id", "Patient ID", "Patient Name", "Primary Doctor", "Doctor ID", "Hospital Name", "Location", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientInfoRequestjTable.setRowHeight(26);
        jScrollPane1.setViewportView(patientInfoRequestjTable);

        backjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        backjButton.setText("<<Back");
        backjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButtonActionPerformed(evt);
            }
        });

        patientMedicalHistoryjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        patientMedicalHistoryjButton.setText("Patient Medical History");
        patientMedicalHistoryjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientMedicalHistoryjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1376, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(backjButton)
                .addGap(515, 515, 515)
                .addComponent(patientMedicalHistoryjButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backjButton)
                    .addComponent(patientMedicalHistoryjButton))
                .addGap(0, 406, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButtonActionPerformed
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_backjButtonActionPerformed

    private void patientMedicalHistoryjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientMedicalHistoryjButtonActionPerformed
        int selectedRow = patientInfoRequestjTable.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a row to proceed further");
            return;
        }
        Patient patient = (Patient) patientInfoRequestjTable.getValueAt(selectedRow, 2);
        if (patient != null) {
            PatientMedicalHistoryJPanel panel = new PatientMedicalHistoryJPanel(upc, patient, ua, enterprise, ecosystem  );
            upc.add("Patientcheckup", panel);
            CardLayout layout = (CardLayout) upc.getLayout();
            layout.next(upc);
        }
    }//GEN-LAST:event_patientMedicalHistoryjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientInfoRequestjTable;
    private javax.swing.JButton patientMedicalHistoryjButton;
    // End of variables declaration//GEN-END:variables
}
