/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Hospital.DoctorArea;

import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.AskforPatientRequest;
import Business.WorkRequest.PatientInfoSent;
import Business.WorkRequest.WorkRequest;
import UserInterface.Pharmaceutical.MedRepArea.ApprovedDrugReviewJPanel;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kshitij
 */
public class ForwardPatientRequestJPanel extends javax.swing.JPanel {

    private JPanel upc;
    private UserAccount ua;
    private Enterprise enterprise;
    private AskforPatientRequest apr;
    private Ecosystem ecosystem;

    /**
     * Creates new form ForwardPatientRequestJPanel
     */
    public ForwardPatientRequestJPanel(JPanel upc, UserAccount ua, Enterprise enterprise, Ecosystem ecosystem) {
        initComponents();
        this.ua = ua;
        this.upc = upc;
        this.enterprise = enterprise;
        this.ecosystem = ecosystem;
        populatePatientInfoReq();
    }

    private void populatePatientInfoReq() {
        DefaultTableModel model = (DefaultTableModel) patientInfoRequestjTable.getModel();
        model.setRowCount(0);
        Employee doctor = (Employee) ua.getPerson();
        for (WorkRequest wr : doctor.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof AskforPatientRequest) {
                apr = (AskforPatientRequest) wr;
                Object[] row = new Object[8];
                row[0] = apr.getReqId();
                row[1] = apr.getPatient().getPatientId();
                row[2] = apr.getPatient();
                row[3] = apr.getSender().getPerson().getName();
                row[4] = apr.getSender().getPerson().getPersonId();
                row[5] = apr.getOrgName();
                row[6] = apr.getCity();
                row[7] = apr;
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patientInfoRequestjTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        approvejButton = new javax.swing.JButton();
        backjButton = new javax.swing.JButton();
        sendjButton = new javax.swing.JButton();
        disapprovedjButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(115, 166, 200));

        patientInfoRequestjTable.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        patientInfoRequestjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Id", "Patient ID", "Patient Name", "Doctor Requesting", "Doctor ID", "Hospital Name", "Location", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientInfoRequestjTable.setRowHeight(26);
        jScrollPane1.setViewportView(patientInfoRequestjTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        jLabel1.setText("TRANSFER PATIENT INFO");

        approvejButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        approvejButton.setText("Approve");
        approvejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approvejButtonActionPerformed(evt);
            }
        });

        backjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        backjButton.setText("<<Back");
        backjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButtonActionPerformed(evt);
            }
        });

        sendjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        sendjButton.setText("Send");
        sendjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendjButtonActionPerformed(evt);
            }
        });

        disapprovedjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        disapprovedjButton.setText("Disapprove");
        disapprovedjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disapprovedjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(402, 402, 402)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(backjButton)
                .addGap(222, 222, 222)
                .addComponent(sendjButton)
                .addGap(216, 216, 216)
                .addComponent(disapprovedjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, Short.MAX_VALUE)
                .addComponent(approvejButton)
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(approvejButton)
                    .addComponent(backjButton)
                    .addComponent(disapprovedjButton)
                    .addComponent(sendjButton))
                .addContainerGap(462, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButtonActionPerformed
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_backjButtonActionPerformed

    private void approvejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approvejButtonActionPerformed
        int selectedRow = patientInfoRequestjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a patiient row to send the approval");
            return;
        }
        AskforPatientRequest apr = (AskforPatientRequest) patientInfoRequestjTable.getValueAt(selectedRow, 7);
        
        if(apr.getStatus().equals("Completed")){
            JOptionPane.showMessageDialog(null,"Request has already been sent" );
            return;
        }
        if (!apr.getStatus().equals("Approved")) {
            apr.setStatus("Approved");
        } else {
            JOptionPane.showMessageDialog(null, "Request has already been approved");
            return; 
        }
        populatePatientInfoReq();
    }//GEN-LAST:event_approvejButtonActionPerformed

    private void sendjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendjButtonActionPerformed
        int selectedRow = patientInfoRequestjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to send");
            return;
        }
        AskforPatientRequest apr = (AskforPatientRequest) patientInfoRequestjTable.getValueAt(selectedRow, 7);
        Patient patient = (Patient) patientInfoRequestjTable.getValueAt(selectedRow, 2);

        if(apr.getStatus().equals("Completed")){
            JOptionPane.showMessageDialog(null,"Request has already been sent" );
            return;
        }
       if(apr.getStatus().equals("Disapproved")){
          JOptionPane.showMessageDialog(null, "Sorry cannot send the request as it has been disapproved");
            return; 
       }
        
        if (!apr.getStatus().equals("Approved")) {
            JOptionPane.showMessageDialog(null, "Please approve the request first to send");
            return;
        } else {
            apr.setStatus("Completed");
        }
        UserAccount requester = apr.getSender();

        PatientInfoSent pis = new PatientInfoSent();
        pis.setPatient(patient);
        pis.setSender(ua);
        pis.setStatus("Completed");
        pis.setCityName(enterprise.getLocation().getCity());
        pis.setOrgName(enterprise.getName());
        requester.getWorkQueue().getWorkRequestList().add(pis);
        JOptionPane.showMessageDialog(null, "patient data has been sent to the desired location");
        populatePatientInfoReq();
    }//GEN-LAST:event_sendjButtonActionPerformed

    private void disapprovedjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disapprovedjButtonActionPerformed
        int selectedRow = patientInfoRequestjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a patiient row to send the approval");
            return;
        }
        AskforPatientRequest apr = (AskforPatientRequest) patientInfoRequestjTable.getValueAt(selectedRow, 7);
        
        if(apr.getStatus().equals("Completed")){
            JOptionPane.showMessageDialog(null,"Request has already been sent" );
            return;
        }
        if (!apr.getStatus().equals("Disapproved")) {
            apr.setStatus("Disapproved");
        } else {
            JOptionPane.showMessageDialog(null, "Request has already been disapproved");
            return; 
        }
        populatePatientInfoReq();
    }//GEN-LAST:event_disapprovedjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approvejButton;
    private javax.swing.JButton backjButton;
    private javax.swing.JButton disapprovedjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patientInfoRequestjTable;
    private javax.swing.JButton sendjButton;
    // End of variables declaration//GEN-END:variables
}
