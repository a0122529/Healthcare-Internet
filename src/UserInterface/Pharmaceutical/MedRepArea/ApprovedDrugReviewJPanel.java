/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Pharmaceutical.MedRepArea;

import Business.Drug.Drug;
import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.DrugApprovalRequest;
import Business.WorkRequest.DrugReview;
import Business.WorkRequest.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kshitij
 */
public class ApprovedDrugReviewJPanel extends javax.swing.JPanel {

    private JPanel upc;
    private UserAccount ua;
    private Enterprise enterprise;
    private Ecosystem ecosystem;

    /**
     * Creates new form ApprovedDrugReviewJPanel
     */
    public ApprovedDrugReviewJPanel(JPanel upc, UserAccount ua, Enterprise enterprise, Ecosystem ecosystem) {
        initComponents();
        this.upc = upc;
        this.ua = ua;
        this.enterprise = enterprise;
        this.ecosystem = ecosystem;
        populateDrugName();
        popuateCityComboBox();
    }

    private void populateDrugName() {
        drugNAmejComboBox.removeAllItems();
        for (WorkRequest wr : enterprise.getWorkQueue().getWorkRequestList()) {
            if (wr instanceof DrugApprovalRequest) {
                DrugApprovalRequest dar = (DrugApprovalRequest) wr;

                for (Drug drug : dar.getDrugDirectory().getDrugList()) {
                    if (drug.getStatus() == null) {
                        return;
                    } else if (drug.getStatus().equals("Approved")) {
                        drugNAmejComboBox.addItem(drug);

                    }
                }
            }
        }
    }

    private void populateApprovedDrugRequest(Drug drug) {
        DefaultTableModel model = (DefaultTableModel) medicineSelectionjTable.getModel();
        model.setRowCount(0);
        Object[] row = new Object[3];
        row[0] = drug.getDrugName();
        row[1] = drug;
        row[2] = drug.getDisease().getDiseaseName();
        model.addRow(row);
    }

    private void populateReviewTable(Drug drug) {
        DefaultTableModel model = (DefaultTableModel) medicineReviewjTable.getModel();
        model.setRowCount(0);
        for (WorkRequest newWr : drug.getWorkQueue().getWorkRequestList()) {
            if (newWr instanceof DrugReview) {
                DrugReview dr = (DrugReview) newWr;

                Object[] row = new Object[11];
                row[0] = dr.getReqId();
                row[1] = drug.getDrugName();
                row[2] = drug;
                row[3] = drug.getDisease().getDiseaseName();
                row[4] = dr.getSender().getPerson().getName();
                row[5] = dr.getReceiver() == null ? ("N/A") : dr.getReceiver().getPerson().getName();
                row[6] = dr.getOrgName();
                row[7] = dr;
                row[8] = dr.getCallBack() == null ? ("No") : (dr.getCallBack());
                row[9] = dr.getStatus();
                row[10] = dr.getReplied() == null ? ("N/A") : (dr.getReplied());
                model.addRow(row);
            }
        }
    }

    private void popuateCityComboBox() {
        cityjComboBox.removeAllItems();
        for (Network network : ecosystem.getNetworkLst()) {
            cityjComboBox.addItem(network);
        }
    }

    private void populateEnterpriseName(Network city) {
        enterpriseNamejComboBox.removeAllItems();
        for (Enterprise enterpriseOther : city.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterpriseOther.getEnterpriseType().getValue().equals("Hospital")
                    || enterpriseOther.getEnterpriseType().getValue().equals("Clinic")
                    || enterpriseOther.getEnterpriseType().getValue().equals("Pharmacy")) {
                enterpriseNamejComboBox.addItem(enterpriseOther);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        medicineReviewjTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        drugNamejLabel = new javax.swing.JLabel();
        drugNAmejComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cityjComboBox = new javax.swing.JComboBox();
        enterpriseNamejComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        medicineSelectionjTable = new javax.swing.JTable();
        sendForReviewjButton = new javax.swing.JButton();
        backjButton = new javax.swing.JButton();
        refreshjButton = new javax.swing.JButton();
        refreshjButton1 = new javax.swing.JButton();
        checkReviewsjButton = new javax.swing.JButton();
        callBackjButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(115, 166, 200));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        medicineReviewjTable.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        medicineReviewjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request ID", "Medicine Name", "Medicine Code", "Disease Cure", "Sender", "Receiver", "Organization Name", "Organization City", "CallBack", "Status", "Customer Replied"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        medicineReviewjTable.setRequestFocusEnabled(false);
        medicineReviewjTable.setRowHeight(26);
        jScrollPane1.setViewportView(medicineReviewjTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 30)); // NOI18N
        jLabel1.setText("APPROVED DRUG REVIEW");

        drugNamejLabel.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        drugNamejLabel.setText("Drug Name");

        drugNAmejComboBox.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        drugNAmejComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drugNAmejComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        jLabel2.setText("City");

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        jLabel4.setText("EnterpriseName");

        cityjComboBox.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        cityjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityjComboBoxActionPerformed(evt);
            }
        });

        enterpriseNamejComboBox.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N

        medicineSelectionjTable.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        medicineSelectionjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Medicine Code", "Disease Cure"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        medicineSelectionjTable.setRequestFocusEnabled(false);
        medicineSelectionjTable.setRowHeight(26);
        jScrollPane2.setViewportView(medicineSelectionjTable);

        sendForReviewjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        sendForReviewjButton.setText("Send for  Review");
        sendForReviewjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendForReviewjButtonActionPerformed(evt);
            }
        });

        backjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        backjButton.setText("<<Back");
        backjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButtonActionPerformed(evt);
            }
        });

        refreshjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        refreshjButton.setText("Refresh");
        refreshjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshjButtonActionPerformed(evt);
            }
        });

        refreshjButton1.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        refreshjButton1.setText("Refresh");
        refreshjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshjButton1ActionPerformed(evt);
            }
        });

        checkReviewsjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        checkReviewsjButton.setText("Check Reviews");
        checkReviewsjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkReviewsjButtonActionPerformed(evt);
            }
        });

        callBackjButton.setFont(new java.awt.Font("Tahoma", 2, 27)); // NOI18N
        callBackjButton.setText("CallBack");
        callBackjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callBackjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(drugNamejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(105, 105, 105)
                        .addComponent(drugNAmejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(backjButton)
                        .addGap(227, 227, 227)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(246, 246, 246)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(enterpriseNamejComboBox, 0, 268, Short.MAX_VALUE)
                                .addComponent(cityjComboBox, 0, 268, Short.MAX_VALUE)
                                .addComponent(sendForReviewjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(refreshjButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(refreshjButton1)
                        .addGap(383, 383, 383)
                        .addComponent(checkReviewsjButton)
                        .addGap(316, 316, 316)
                        .addComponent(callBackjButton)))
                .addContainerGap(332, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(drugNAmejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drugNamejLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backjButton)
                    .addComponent(refreshjButton))
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(114, 114, 114))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(enterpriseNamejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55)
                .addComponent(sendForReviewjButton)
                .addGap(98, 98, 98)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshjButton1)
                    .addComponent(checkReviewsjButton)
                    .addComponent(callBackjButton))
                .addContainerGap(49, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButtonActionPerformed
        upc.remove(this);
        CardLayout layout = (CardLayout) upc.getLayout();
        layout.previous(upc);
    }//GEN-LAST:event_backjButtonActionPerformed

    private void refreshjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshjButtonActionPerformed
        Drug drug = (Drug) drugNAmejComboBox.getSelectedItem();
        if (drug != null) {
            populateApprovedDrugRequest(drug);
        }
    }//GEN-LAST:event_refreshjButtonActionPerformed

    private void drugNAmejComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drugNAmejComboBoxActionPerformed
        Drug drug = (Drug) drugNAmejComboBox.getSelectedItem();
        if (drug != null) {
            populateApprovedDrugRequest(drug);
            populateReviewTable(drug);
        }
    }//GEN-LAST:event_drugNAmejComboBoxActionPerformed

    private void cityjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityjComboBoxActionPerformed
        Network city = (Network) cityjComboBox.getSelectedItem();
        if (city != null) {
            populateEnterpriseName(city);
        }
    }//GEN-LAST:event_cityjComboBoxActionPerformed

    private void sendForReviewjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendForReviewjButtonActionPerformed
        Network city = (Network) cityjComboBox.getSelectedItem();
        Enterprise enterpriseOther = (Enterprise) enterpriseNamejComboBox.getSelectedItem();
        int selectedRow = medicineSelectionjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        Drug drug = (Drug) medicineSelectionjTable.getValueAt(selectedRow, 1);
        if (city == null || enterprise == null || drug == null) {
            JOptionPane.showMessageDialog(null, "Please select all the values from the combo box");
            return;
        }
        DrugReview dr = new DrugReview();

        dr.setCity(city.getName());
        dr.setOrgName(enterpriseOther.getName());
        dr.setSender(ua);     //   dr.getDrugDirectory().getDrugList().add(drug);
        dr.setPharmaceutical(enterprise.getName());
        dr.setReplied("No");
        dr.setStatus("Sent");
        dr.setCallBack("Yet to Decide");
        dr.getDrugDirectory().getDrugList().add(drug);
        enterpriseOther.getWorkQueue().getWorkRequestList().add(dr);
        drug.getWorkQueue().getWorkRequestList().add(dr);
        populateDrugName();
    }//GEN-LAST:event_sendForReviewjButtonActionPerformed

    private void refreshjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshjButton1ActionPerformed
        Drug drug = (Drug) drugNAmejComboBox.getSelectedItem();
        if (drug != null) {
            populateReviewTable(drug);
        }
    }//GEN-LAST:event_refreshjButton1ActionPerformed

    private void callBackjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callBackjButtonActionPerformed
        int selectedRow = medicineReviewjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        Drug drug = (Drug) medicineReviewjTable.getValueAt(selectedRow, 2);
        DrugReview dr = (DrugReview) medicineReviewjTable.getValueAt(selectedRow, 7);
        if (!dr.getReplied().equals("Yes")) {
            JOptionPane.showMessageDialog(null, "Customer has not replied yet");
            return;
        }

        if (dr.getCallBack().equals("Yes")) {
            JOptionPane.showMessageDialog(null, "drug already calledback");
            return;
        } else {
            dr.setCallBack("Yes");
            dr.setStatus("Product Withdrawn");

            for (Drug drug1 : ecosystem.getDrugDirectory().getDrugList()) {
                if (drug1.getDrugId() == drug.getDrugId()) {
                    drug1.setStatus("Drug Disapproved");
                }
            }

            for (Drug drug2 : enterprise.getDrugDirectory().getDrugList()) {
                if (drug2.getDrugId() == drug.getDrugId()) {
                    drug2.setStatus("Drug Disapproved");
                }
            }
        }

        if (drug != null) {
            populateReviewTable(drug);
        }
        populateDrugName();
        Drug drug4 = (Drug) drugNAmejComboBox.getSelectedItem();
        populateReviewTable(drug4);
        
    }//GEN-LAST:event_callBackjButtonActionPerformed

    private void checkReviewsjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkReviewsjButtonActionPerformed
        int selectedRow = medicineReviewjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        Drug drug = (Drug) medicineReviewjTable.getValueAt(selectedRow, 2);
        DrugReview dr = (DrugReview) medicineReviewjTable.getValueAt(selectedRow, 7);

        if (!dr.getReplied().equals("Yes")) {
            JOptionPane.showMessageDialog(null, "Customer has not replied yet");
            return;
        }
        CheckReviewsJPanel panel = new CheckReviewsJPanel(upc, drug, dr);
        upc.add("SupplerRequestPanel", panel);
        CardLayout cardLayout = (CardLayout) upc.getLayout();
        cardLayout.next(upc);
    }//GEN-LAST:event_checkReviewsjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton;
    private javax.swing.JButton callBackjButton;
    private javax.swing.JButton checkReviewsjButton;
    private javax.swing.JComboBox cityjComboBox;
    private javax.swing.JComboBox drugNAmejComboBox;
    private javax.swing.JLabel drugNamejLabel;
    private javax.swing.JComboBox enterpriseNamejComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable medicineReviewjTable;
    private javax.swing.JTable medicineSelectionjTable;
    private javax.swing.JButton refreshjButton;
    private javax.swing.JButton refreshjButton1;
    private javax.swing.JButton sendForReviewjButton;
    // End of variables declaration//GEN-END:variables
}
